apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: opera-poc-grafana
  annotations:
    policies.kyverno.io/title: opera-poc-grafana
    policies.kyverno.io/category: Visa-Custom
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: Pod
    kyverno.io/kyverno-version: 1.10.3
    kyverno.io/kubernetes-version: "1.23-1.26"
    policies.kyverno.io/description: >-
      opera-poc-grafana visa policy
spec:
  validationFailureAction: Audit
  background: true
  rules:
    - name: securityContext-podlevelvalidation
      match:
        any:
        - resources:
            kinds:
              - Pod
      validate:
        message: >-
          Policy for opera-poc-grafana.        
        anyPattern:
      # spec.securityContext.runAsNonRoot must be set to true. If containers and/or initContainers exist which declare a securityContext field, those must have runAsNonRoot also set to true.
        - spec:
            securityContext:              
              fsGroup: '1-65535'		  
              supplementalGroups: '1-65535'
              runAsUser: '*'		   
            containers:
            - =(securityContext):
                =(allowPrivilegeEscalation): "false"
                =(runAsUser): '*'	
                =(seLinuxOptions):
                  level: "?*"	
            =(initContainers):
            - =(securityContext):
                =(allowPrivilegeEscalation): "false"
                =(runAsUser): '*'	
                =(seLinuxOptions):
                  level: "?*"	
            =(ephemeralContainers):
            - =(securityContext):
                =(allowPrivilegeEscalation): "false"
                =(runAsUser): '*'	
                =(seLinuxOptions):
                  level: "?*"							
      # All containers and initContainers must define (not optional) runAsNonRoot=true.
        - spec:
            containers:
            - securityContext:
                =(allowPrivilegeEscalation): "false"
                =(runAsUser): '*'	
                seLinuxOptions:
                  level: "?*"		
            =(initContainers):
            - =(securityContext):
                =(allowPrivilegeEscalation): "false"
                =(runAsUser): '*'	
                =(seLinuxOptions):
                  level: "?*"			
            =(ephemeralContainers):
            - =(securityContext):
                =(allowPrivilegeEscalation): "false"
                =(runAsUser): '*'	
                =(seLinuxOptions):
                  level: "?*"				
    - name: restricted-volumes
      match:
        any:
        - resources:
            kinds:
              - Pod
      validate:
        message: >-
          Only the following types of volumes may be used: configMap and secret.          
        deny:
          conditions:
            all:
            - key: "{{ request.object.spec.volumes[].keys(@)[] || '' }}"
              operator: AnyNotIn
              value:
              - name
              - configMap
              - emptyDir
              - projected
              - csi
              - secret
              - downwardAPI
              - persistentVolumeClaim
              - ''               
    - name: require-drop-all
      match:
        any:
        - resources:
            kinds:
              - Pod
      preconditions:
        all:
        - key: "{{ request.operation || 'BACKGROUND' }}"
          operator: NotEquals
          value: DELETE
      validate:
        message: >-
          Containers must drop `ALL` capabilities.          
        foreach:
          - list: request.object.spec.[ephemeralContainers, initContainers, containers][]
            deny:
              conditions:
                all:
                - key: ALL
                  operator: AnyNotIn
                  value: "{{ element.securityContext.capabilities.drop[].to_upper(@) || `[]` }}"


