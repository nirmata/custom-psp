apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: cadvisor
  annotations:
    policies.kyverno.io/title: cadvisor
    policies.kyverno.io/category: Visa-Custom
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: Pod
    kyverno.io/kyverno-version: 1.10.3
    kyverno.io/kubernetes-version: "1.23-1.26"
    policies.kyverno.io/description: >-
      cadvisor visa policy
spec:
  validationFailureAction: Audit
  background: true
  rules:
    - name: securityContext-podlevelvalidation
      match:
        any:
        - resources:
            kinds:
              - Pod
      validate:
        message: >-
          Policy for cadvisor.        
        anyPattern:
      # spec.securityContext.runAsNonRoot must be set to true. If containers and/or initContainers exist which declare a securityContext field, those must have runAsNonRoot also set to true.
        - spec:
            securityContext:              
              fsGroup: '*'		  
              supplementalGroups: '*'	
              runAsUser: '*'		   
            containers:
            - =(securityContext):
                =(allowPrivilegeEscalation): "false"
                =(runAsUser): '*'	
                =(readOnlyRootFilesystem): "true"
                =(seLinuxOptions):
                  level: "?*"	
            =(initContainers):
            - =(securityContext):
                =(allowPrivilegeEscalation): "false"
                =(runAsUser): '*'	
                =(readOnlyRootFilesystem): "true"
                =(seLinuxOptions):
                  level: "?*"	
            =(ephemeralContainers):
            - =(securityContext):
                =(allowPrivilegeEscalation): "false"
                =(runAsUser): '*'	
                =(readOnlyRootFilesystem): "true"
                =(seLinuxOptions):
                  level: "?*"							
      # All containers and initContainers must define (not optional) runAsNonRoot=true.
        - spec:
            containers:
            - securityContext:
                =(allowPrivilegeEscalation): "false"
                =(runAsUser): '*'	
                =(readOnlyRootFilesystem): "true"
                seLinuxOptions:
                  level: "?*"		
            =(initContainers):
            - =(securityContext):
                =(allowPrivilegeEscalation): "false"
                =(runAsUser): '*'	
                =(readOnlyRootFilesystem): "true"
                =(seLinuxOptions):
                  level: "?*"			
            =(ephemeralContainers):
            - =(securityContext):
                =(allowPrivilegeEscalation): "false"
                =(runAsUser): '*'	
                =(readOnlyRootFilesystem): "true"
                =(seLinuxOptions):
                  level: "?*"				
    - name:  allowedhostpath
      match:
        any:
        - resources:
            kinds:
              - Pod
      preconditions:
        all:
        - key: "{{ request.object.spec.volumes[?hostPath] | length(@) }}"
          operator: GreaterThanOrEquals
          value: 1
        - key: "{{request.operation || 'BACKGROUND'}}"
          operator: AnyIn
          value:
          - CREATE
          - UPDATE
      validate:
        message: hostPath volumes are confined to "/, /var/run, /sys/ /var/lib/docker, /dev/disk".
        foreach:
        - list: "request.object.spec.volumes[?hostPath].hostPath"
          deny:
            conditions:
              all:
              - key: "{{ element.path  | to_string(@)  }}"
                operator: NotEquals
                value: "/var/run"    
              - key: "{{ element.path  | to_string(@)  }}"
                operator: NotEquals
                value: "/"   
              - key: "{{ element.path  | to_string(@)  }}"
                operator: NotEquals
                value: "/sys"   
              - key: "{{ element.path  | to_string(@)  }}"
                operator: NotEquals
                value: "/var/lib/docker"   
              - key: "{{ element.path  | to_string(@)  }}"
                operator: NotEquals
                value: "/dev/disk"   