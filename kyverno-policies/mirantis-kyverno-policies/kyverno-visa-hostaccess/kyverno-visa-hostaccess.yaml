apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: visa-hostaccess-policy
  annotations:
    policies.kyverno.io/title: hostaccess policy
    policies.kyverno.io/category: Visa-Custom 
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: Pod
    kyverno.io/kyverno-version: 1.9.2
    kyverno.io/kubernetes-version: "1.22-1.23"
    policies.kyverno.io/description: >-
        Custom Policy for allowing hostPath access
spec:
  validationFailureAction: Enforce
  background: true
  rules:
    - name: securityContext-hostlevelvalidation
      match:
        any:
        - resources:
            kinds:
              - Pod
      validate:
        message: >-
             Allow hostPath access
        pattern:
          spec:
            securityContext:
              runAsNonRoot: true
              fsGroup: '1-65535'
              supplementalGroups: '1-65535'  
            =(hostNetwork): "false"
            =(hostPID): "false"
            =(hostIPC): "?*"
            =(ephemeralContainers):
              securityContext:
                allowPrivilegeEscalation: "false"
                privileged: "false"
                readOnlyRootFilesystem: "true"
                seLinuxOptions:
                  level: "?*"   
            =(initContainers):
              securityContext:
                allowPrivilegeEscalation: "false"
                privileged: "false"
                readOnlyRootFilesystem: "true"
                seLinuxOptions:
                  level: "?*"   
            containers:
              - securityContext:
                 allowPrivilegeEscalation: "false"
                 privileged: "false"
                 readOnlyRootFilesystem: "true"
                 seLinuxOptions:
                  level: "?*"   
    - name: restricted-volumes
      match:
        any:
        - resources:
            kinds:
              - Pod
      validate:
        message: >-
          Only the following types of volumes may be used: configMap, downwardAPI,
          emptyDir, persistentVolumeClaim, projected, and secret.          
        deny:
          conditions:
            all:
            - key: "{{ request.object.spec.volumes[].keys(@)[] || '' }}"
              operator: AnyNotIn
              value:
              - name
              - configMap
              - downwardAPI
              - emptyDir
              - persistentVolumeClaim
              - projected
              - secret
              - hostPath
              - ''
    - name: ensure-hostpaths-readonly
      match:
        any:
        - resources:
            kinds:
              - Pod
      preconditions:
        all:
        - key: "{{ request.operation || 'BACKGROUND' }}"
          operator: AnyIn
          value:
          - CREATE
          - UPDATE
      validate:
        message: All hostPath volumes must be mounted as readOnly.
        foreach:
        # Fetch all volumes in the Pod which are a hostPath. Store the names in an array. There could be multiple in a Pod so can't assume just one.
        - list: "request.object.spec.volumes[?hostPath][]"
          deny:
            conditions:
            # For every name found for a hostPath volume (stored as `{{element}}`), check all containers, initContainers, and ephemeralContainers which mount this volume and
            # total up the number of them. Compare that to the ones with that same name which explicitly specify that `readOnly: true`. If these two
            # counts aren't equal, deny the Pod because at least one is attempting to mount that hostPath in read/write mode. Note that the absence of
            # the `readOnly: true` field implies read/write access. Therefore, every hostPath volume must explicitly specify that it should be mounted
            # in readOnly mode, regardless of where that occurs in a Pod.
              any:
              - key: "{{ request.object.spec.[containers, initContainers, ephemeralContainers][].volumeMounts[?name == '{{element.name}}'][] | length(@) }}"
                operator: NotEquals
                value: "{{ request.object.spec.[containers, initContainers, ephemeralContainers][].volumeMounts[?name == '{{element.name}}' && readOnly] [] | length(@) }}"
    - name: limit-hostpath-to-slash-var-slash-etc
      match:
        any:
        - resources:
            kinds:
            - Pod
      preconditions:
        all:
        - key: "{{ request.object.spec.volumes[?hostPath] | length(@) }}"
          operator: GreaterThanOrEquals
          value: 1
        - key: "{{request.operation || 'BACKGROUND'}}"
          operator: AnyIn
          value:
          - CREATE
          - UPDATE
      validate:
        message: hostPath volumes are confined to /var & /etc.
        foreach:
        - list: "request.object.spec.volumes[?hostPath].hostPath"
          deny:
            conditions:
              all:
              - key: "{{ element.path  | to_string(@)  }}"
                operator: NotEquals
                value: "/var"
              - key: "{{ element.path  | to_string(@)  }}"
                operator: NotEquals
                value: "/etc"
    - name: required-drop-capabilities
      match:
        any:
        - resources:
            kinds:
              - Pod
      preconditions:
        all:
        - key: "{{ request.operation || 'BACKGROUND' }}"
          operator: NotEquals
          value: DELETE
      validate:
        message: >-
                    Any container needs to have KILL, MKNOD, SETUID, SETGID, SYS_CHROOT, NET_RAW capabilities.
        foreach:
          - list: request.object.spec.[ephemeralContainers, initContainers, containers][]
            deny:
              conditions:
                any:
                - key: KILL
                  operator: AnyNotIn
                  value: "{{ element.securityContext.capabilities.drop[].to_upper(@) || `[]` }}"
                - key: MKNOD
                  operator: AnyNotIn
                  value: "{{ element.securityContext.capabilities.drop[].to_upper(@) || `[]` }}"
                - key: SYS_CHROOT
                  operator: AnyNotIn
                  value: "{{ element.securityContext.capabilities.drop[].to_upper(@) || `[]` }}"
                - key: SETUID
                  operator: AnyNotIn
                  value: "{{ element.securityContext.capabilities.drop[].to_upper(@) || `[]` }}"
                - key: SETGID
                  operator: AnyNotIn
                  value: "{{ element.securityContext.capabilities.drop[].to_upper(@) || `[]` }}"
                - key: NET_RAW
                  operator: AnyNotIn
                  value: "{{ element.securityContext.capabilities.drop[].to_upper(@) || `[]` }}"