apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name:  kyverno-hostnetwork
  annotations:
    policies.kyverno.io/title:  hostnetwork-custom
    policies.kyverno.io/category: Visa-Custom
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: Pod
    kyverno.io/kyverno-version: 1.9.2
    kyverno.io/kubernetes-version: "1.23-1.26"
    policies.kyverno.io/description: >-
      Custom Policy for hostnetwork deplyment at Visa     
spec:
  validationFailureAction: Enforce
  background: true
  rules:
    - name: securityContext-hostlevelvalidation
      match:
        any:
        - resources:
            kinds:
              - Pod
            namespaces:
              - openshift-ingress
            names:
              - router-default-7f454bfdd6-n58nr
              - router-default-7f454bfdd6-npzkh
              - router-default-7f454bfdd6-nrpm9
        - resources:
            kinds:
              - Pod
            namespaces:
              - openshift-machine-config-operator
            names:
              - machine-config-server-6dgjz
              - machine-config-server-b7vkg
              - machine-config-server-cmml5
              - machine-config-server-t798j
              - machine-config-server-vt4s5
      validate:
        message: >-
          Policy for hostnetwork.         
        pattern:
          spec:
            hostNetwork: true
            =(hostIPC): false
            =(hostPID): false  
            securityContext:
              runAsUser: "1000-65535"
              fsGroup: '1-65535'
              supplementalGroups: '1-65535'    
            =(ephemeralContainers):
            - securityContext:
                allowPrivilegeEscalation: true
                readOnlyRootFilesystem: false
                privileged: false
                seLinuxOptions:
                  level: "?*"
            =(initContainers):
            - securityContext:
                allowPrivilegeEscalation: true
                readOnlyRootFilesystem: false
                privileged: false
                seLinuxOptions:
                  level: "?*"
            containers:
            - securityContext:
                allowPrivilegeEscalation: true
                readOnlyRootFilesystem: false
                privileged: false
                seLinuxOptions:
                  level: "?*"
    - name: restricted-volumes
      match:
        any:
        - resources:
            kinds:
              - Pod
      validate:
        message: >-
          Only the following types of volumes may be used: configMap, downwardAPI,
          emptyDir, persistentVolumeClaim, projected, and secret.          
        deny:
          conditions:
            all:
            - key: "{{ request.object.spec.volumes[].keys(@)[] || '' }}"
              operator: AnyNotIn
              value:
              - name
              - configMap
              - downwardAPI
              - emptyDir
              - persistentVolumeClaim
              - projected
              - secret
              - ''
    - name: required-drop-capabilities
      match:
        any:
        - resources:
            kinds:
              - Pod
      preconditions:
        all:
        - key: "{{ request.operation || 'BACKGROUND' }}"
          operator: NotEquals
          value: DELETE
      validate:
        message: >-
                    Any container needs to have KILL, MKNOD, SETUID, SETGID capabilities.
        foreach:
          - list: request.object.spec.[ephemeralContainers, initContainers, containers][]
            deny:
              conditions:
                all:
                - key: "{{ element.securityContext.capabilities.drop[] || '' }}"
                  operator: AnyNotIn
                  value:
                  - KILL
                  - MKNOD
                  - SETUID
                  - SETGID
    - name: host-ports
      match:
        any:
        - resources:
            kinds:
              - Pod
      validate:
        message: >-
          Use of host ports. The fields spec.containers[*].ports[*].hostPort
          , spec.initContainers[*].ports[*].hostPort, and spec.ephemeralContainers[*].ports[*].hostPort
          must either be unset or set between `0-65535`.          
        pattern:
          spec:
            =(ephemeralContainers):
              - =(ports):
                  - =(hostPort): "0-65535"
            =(initContainers):
              - =(ports):
                  - =(hostPort): "0-65535"
            containers:
              - =(ports):
                  - =(hostPort): "0-65535"
