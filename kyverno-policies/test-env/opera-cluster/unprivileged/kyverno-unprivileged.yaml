apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: unprivileged
  annotations:
    policies.kyverno.io/title: unprivileged
    policies.kyverno.io/category: Visa-Custom
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: Pod
    kyverno.io/kyverno-version: 1.10.3
    kyverno.io/kubernetes-version: "1.23-1.26"
    policies.kyverno.io/description: >-
      Custom Policy for unprivileged access deployment at Visa
spec:
  validationFailureAction: Audit
  background: true
  rules:
    - name: securityContext-podlevelvalidation
      match:
        any:
        - resources:
            kinds:
              - Pod
      validate:
        message: >-
          Policy for unprivileged Access.        
        anyPattern:
      # spec.securityContext.runAsNonRoot must be set to true. If containers and/or initContainers exist which declare a securityContext field, those must have runAsNonRoot also set to true.
        - spec:
            securityContext:              
              fsGroup: '*'			  
              supplementalGroups: '*'
              runAsUser: '*'		   
            containers:
            - =(securityContext):
                =(allowPrivilegeEscalation): "false"
                =(runAsUser): '*'	
                =(seLinuxOptions):
                  level: "?*"
              =(ports): 
               - =(hostPort): '0-65535'		
            =(initContainers):
            - =(securityContext):
                =(allowPrivilegeEscalation): "false"
                =(runAsUser): '*'	
                =(seLinuxOptions):
                  level: "?*"
              =(ports): 
               - =(hostPort): '0-65535'		
            =(ephemeralContainers):
            - =(securityContext):
                =(allowPrivilegeEscalation): "false"
                =(runAsUser): '*'	
                =(seLinuxOptions):
                  level: "?*"				
              =(ports): 
               - =(hostPort): '0-65535'				
      # All containers and initContainers must define (not optional) runAsNonRoot=true.
        - spec:
            containers:
            - securityContext:                
                =(runAsUser): '*'	
                =(allowPrivilegeEscalation): "false"
                seLinuxOptions:
                  level: "?*"
              =(ports): 
               - =(hostPort): '0-65535'			
            =(initContainers):
            - =(securityContext):
                =(allowPrivilegeEscalation): "false"
                =(runAsUser): '*'	
                =(seLinuxOptions):
                  level: "?*"
              =(ports): 
               - =(hostPort): '0-65535'				
            =(ephemeralContainers):
            - =(securityContext):
                =(allowPrivilegeEscalation): "false"
                =(runAsUser): '*'	
                =(seLinuxOptions):
                  level: "?*"				
              =(ports): 
               - =(hostPort): '0-65535'				
    - name: ensure-hostpaths-readonly
      match:
        any:
        - resources:
            kinds:
              - Pod
      preconditions:
        all:
        - key: "{{ request.operation || 'BACKGROUND' }}"
          operator: AnyIn
          value:
          - CREATE
          - UPDATE
      validate:
        message: All hostPath volumes must be mounted as readOnly.
        foreach:
        # Fetch all volumes in the Pod which are a hostPath. Store the names in an array. There could be multiple in a Pod so can't assume just one.
        - list: "request.object.spec.volumes[?hostPath][]"
          deny:
            conditions:
            # For every name found for a hostPath volume (stored as `{{element}}`), check all containers, initContainers, and ephemeralContainers which mount this volume and
            # total up the number of them. Compare that to the ones with that same name which explicitly specify that `readOnly: true`. If these two
            # counts aren't equal, deny the Pod because at least one is attempting to mount that hostPath in read/write mode. Note that the absence of
            # the `readOnly: true` field implies read/write access. Therefore, every hostPath volume must explicitly specify that it should be mounted
            # in readOnly mode, regardless of where that occurs in a Pod.
              any:
              - key: "{{ request.object.spec.[containers, initContainers, ephemeralContainers][].volumeMounts[?name == '{{element.name}}'][] | length(@) }}"
                operator: NotEquals
                value: "{{ request.object.spec.[containers, initContainers, ephemeralContainers][].volumeMounts[?name == '{{element.name}}' && readOnly] [] | length(@) }}"
    - name: allowedhostpath
      match:
        any:
        - resources:
            kinds:
            - Pod
      preconditions:
        all:
        - key: "{{ request.object.spec.volumes[?hostPath] | length(@) }}"
          operator: GreaterThanOrEquals
          value: 1
        - key: "{{request.operation || 'BACKGROUND'}}"
          operator: AnyIn
          value:
          - CREATE
          - UPDATE
      validate:
        message: hostPath volumes are confined to "/dev/null/."
        foreach:
        - list: "request.object.spec.volumes[?hostPath].hostPath"
          deny:
            conditions:
              all:
              - key: "{{ element.path  | to_string(@)  }}"
                operator: NotEquals
                value: "/dev/null/"
                