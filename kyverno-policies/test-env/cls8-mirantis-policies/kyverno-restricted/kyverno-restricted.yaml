apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: visa-restricted
  annotations:
    policies.kyverno.io/title: Visa Restrict Access
    policies.kyverno.io/category: Visa-Custom
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: Pod
    kyverno.io/kyverno-version: 1.9.2
    kyverno.io/kubernetes-version: "1.23-1.26"
    policies.kyverno.io/description: >-
      Custom Policy for restricted access deployment at Visa
spec:
  validationFailureAction: Audit
  background: true
  rules:
    - name: securityContext-podlevelvalidation
      exclude:
        any:
        - resources:
            kinds:
              - Pod
            namespaces:
              - calico-system
              - cert-manager
              - infra-monitoring
              - istio-gateway
              - kube-system
              - tigera-*
      match:
        any:
        - resources:
            kinds:
              - Pod
            namespaces:
              - istio-system
              - tsb
      validate:
        message: >-
          Policy for Restricted Access.   
        pattern:
          spec:            
            =(securityContext):
              =(runAsUser): "*"
              =(runAsGroup): "*"
              =(fsGroup): "*"
              =(supplementalGroups): "*"
              =(runAsNonRoot): "true|false"
              =(allowPrivilegeEscalation): "true|false"  
              =(privileged): "true|false"
              =(capabilities):
                  =(drop):
                    - all
              =(seLinuxOptions):
                =(level): "?*"
    - name: securityContext-containerlevelvalidation
      exclude:
        any:
        - resources:
            kinds:
              - Pod
            namespaces:
              - calico-system
              - cert-manager
              - infra-monitoring
              - istio-gateway
              - kube-system
              - tigera-*
      match:
        any:
        - resources:
            kinds:
              - Pod
            namespaces:
              - istio-system
              - tsb
      preconditions:
        all:
        - key: "{{ request.object.spec.securityContext || '' | length(@) }}"
          operator: Equals
          value: 0
      validate:
        message: >-
          Policy for privileged Access. 
        pattern:
          spec:   
            =(ephemeralContainers):          
            - =(securityContext):
                =(allowPrivilegeEscalation): "true|false"  
                =(readOnlyRootFilesystem): "true|false"
                =(privileged): "true|false"
                =(capabilities):
                    =(drop):
                      - all
                =(seLinuxOptions):
                  =(level): "?*"
              =(ports): 
               - =(hostPort): '0-65535'
            =(initContainers):          
            - =(securityContext):
                =(allowPrivilegeEscalation): "true|false"  
                =(readOnlyRootFilesystem): "true|false"
                =(privileged): "true|false"
                =(capabilities):
                    =(drop):
                      - all
                =(seLinuxOptions):
                  =(level): "?*"
              =(ports): 
               - =(hostPort): '0-65535'
            containers:          
            - =(securityContext):
                =(allowPrivilegeEscalation): "true|false"  
                =(readOnlyRootFilesystem): "true|false"
                =(privileged): "true|false"
                =(capabilities):
                    =(drop):
                      - all
                =(seLinuxOptions):
                  =(level): "?*"
              =(ports): 
               - =(hostPort): '0-65535'          
    - name: restricted-volumes
      exclude:
        any:
        - resources:
            kinds:
              - Pod
            namespaces:
              - calico-system
              - cert-manager
              - infra-monitoring
              - istio-gateway
              - kube-system
              - tigera-*
      match:
        any:
        - resources:
            kinds:
              - Pod
            namespaces:
              - istio-system
              - tsb
      validate:
        message: >-
          Only the following types of volumes may be used: configMap, downwardAPI,
          emptyDir, persistentVolumeClaim, projected, and secret.          
        deny:
          conditions:
            all:
            - key: "{{ request.object.spec.volumes[].keys(@)[] || '' }}"
              operator: AnyNotIn
              value:
              - name
              - configMap
              - downwardAPI
              - emptyDir
              - persistentVolumeClaim
              - projected
              - secret
              - hostPath
              - ''
    - name: ensure-hostpaths-readonly
      exclude:
        any:
        - resources:
            kinds:
              - Pod
            namespaces:
              - calico-system
              - cert-manager
              - infra-monitoring
              - istio-gateway
              - kube-system
              - tigera-*
      match:
        any:
        - resources:
            kinds:
              - Pod
            namespaces:
              - istio-system
              - tsb
      preconditions:
        all:
        - key: "{{ request.operation || 'BACKGROUND' }}"
          operator: AnyIn
          value:
          - CREATE
          - UPDATE
      validate:
        message: All hostPath volumes must be mounted as readOnly.
        foreach:
        # Fetch all volumes in the Pod which are a hostPath. Store the names in an array. There could be multiple in a Pod so can't assume just one.
        - list: "request.object.spec.volumes[?hostPath][]"
          deny:
            conditions:
            # For every name found for a hostPath volume (stored as `{{element}}`), check all containers, initContainers, and ephemeralContainers which mount this volume and
            # total up the number of them. Compare that to the ones with that same name which explicitly specify that `readOnly: true`. If these two
            # counts aren't equal, deny the Pod because at least one is attempting to mount that hostPath in read/write mode. Note that the absence of
            # the `readOnly: true` field implies read/write access. Therefore, every hostPath volume must explicitly specify that it should be mounted
            # in readOnly mode, regardless of where that occurs in a Pod.
              any:
              - key: "{{ request.object.spec.[containers, initContainers, ephemeralContainers][].volumeMounts[?name == '{{element.name}}'][] | length(@) }}"
                operator: NotEquals
                value: "{{ request.object.spec.[containers, initContainers, ephemeralContainers][].volumeMounts[?name == '{{element.name}}' && readOnly] [] | length(@) }}"
    - name: limit-hostpath-to-slash-dev-slash-null
      exclude:
        any:
        - resources:
            kinds:
              - Pod
            namespaces:
              - calico-system
              - cert-manager
              - infra-monitoring
              - istio-gateway
              - kube-system
              - tigera-*
      match:
        any:
        - resources:
            kinds:
              - Pod
            namespaces:
              - istio-system
              - tsb
      preconditions:
        all:
        - key: "{{ request.object.spec.volumes[?hostPath] | length(@) }}"
          operator: GreaterThanOrEquals
          value: 1
        - key: "{{request.operation || 'BACKGROUND'}}"
          operator: AnyIn
          value:
          - CREATE
          - UPDATE
      validate:
        message: hostPath volumes are confined to /dev/null.
        foreach:
        - list: "request.object.spec.volumes[?hostPath].hostPath"
          deny:
            conditions:
              any:
              - key: "{{ element.path  | to_string(@)  }}"
                operator: NotEquals
                value: "/dev/null"