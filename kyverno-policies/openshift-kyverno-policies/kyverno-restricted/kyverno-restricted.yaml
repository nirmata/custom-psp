apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: restricted
  annotations:
    policies.kyverno.io/description: >-
      Restricted Policy - Disallow privilege escalation, such as via set-user-ID or set-group-ID file mode, should not be allowed.
      This policy ensures the `allowPrivilegeEscalation` field is set to `false`.      
spec:
  validationFailureAction: Enforce
  background: true
  rules:
    - name: securitycontext-hostlevelvalidation
      match:
        any:
        - resources:
            kinds:
              - Pod
      validate:
        message: >-
          This is  Restricted policy  - restricting access at host level, disallow privilege escalation and restricting volume types.        
        pattern:
          spec:
            securityContext:
              runAsUser: "1000-65535"
              fsGroup: "1000-65535"
              supplementalGroups: "?*"
            =(hostNetwork): false
            =(hostIPC): false
            =(hostPID): false 
            =(ephemeralContainers):
                securityContext:
                  allowPrivilegeEscalation: "false"
                  readOnlyRootFilesystem: "true"
                  seLinuxOptions:
                    level: "?*"
            =(initContainers):
                securityContext:
                  allowPrivilegeEscalation: "false"
                  readOnlyRootFilesystem: "true"
                  seLinuxOptions:
                    level: "?*"
            containers:
            - securityContext:
                allowPrivilegeEscalation: "false"
                readOnlyRootFilesystem: "true"
                seLinuxOptions:
                  level: "?*"
    - name: restricted-volumes
      match:
        any:
        - resources:
            kinds:
              - Pod
      preconditions:
        all:
        - key: "{{ request.operation || 'BACKGROUND' }}"
          operator: NotEquals
          value: DELETE
      validate:
        message: >-
          Only the following types of volumes may be used: configMap, downwardAPI,
          emptyDir, persistentVolumeClaim, projected, and secret.
        deny:
          conditions:
            all:
            - key: "{{ request.object.spec.volumes[].keys(@)[] || '' }}"
              operator: AnyNotIn
              value:
              - name
              - configMap
              - downwardAPI
              - emptyDir
              - persistentVolumeClaim
              - projected
              - secret
              - ''
    - name: host-ports-none
      match:
        any:
        - resources:
            kinds:
              - Pod
      validate:
        message: >-
          Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
          , spec.initContainers[*].ports[*].hostPort, and spec.ephemeralContainers[*].ports[*].hostPort
          must either be unset or set to `0`.          
        pattern:
          spec:
            =(ephemeralContainers):
              - =(ports):
                  - =(hostPort): 0
            =(initContainers):
              - =(ports):
                  - =(hostPort): 0
            containers:
              - =(ports):
                  - =(hostPort): 0
    - name: required-drop-capabilities
      match:
        any:
        - resources:
            kinds:
              - Pod
      preconditions:
        all:
        - key: "{{ request.operation || 'BACKGROUND' }}"
          operator: NotEquals
          value: DELETE
      validate:
        message: >-
                    Any container needs to have KILL, MKNOD, SETUID, SETGID capabilities.
        foreach:
          - list: request.object.spec.[ephemeralContainers, initContainers, containers][]
            deny:
              conditions:
                any:
                - key: KILL
                  operator: AnyNotIn
                  value: "{{ element.securityContext.capabilities.drop[].to_upper(@) || `[]` }}"
                - key: MKNOD
                  operator: AnyNotIn
                  value: "{{ element.securityContext.capabilities.drop[].to_upper(@) || `[]` }}"
                - key: SETUID
                  operator: AnyNotIn
                  value: "{{ element.securityContext.capabilities.drop[].to_upper(@) || `[]` }}"
                - key: SETGID
                  operator: AnyNotIn
                  value: "{{ element.securityContext.capabilities.drop[].to_upper(@) || `[]` }}"
    - name: allo-system-authenticate-group-binding
      match:
        any:
        - resources:
            kinds:
              - RoleBinding
              - ClusterRoleBinding
      validate:
        message: "Only Binding to system:authenticated is allowed."
        pattern:
          roleRef:
            name: "system:authenticated"
